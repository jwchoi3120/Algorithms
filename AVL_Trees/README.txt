AVL Tree

Explanation : Implemented a AVL Tree, which is a specific type of Binary Search Tree. A Binary Search Tree is a structure in which there are nodes, and each node has at most two children, a left and a right node. The rule for a Binary Search Tree is that the left node of every node in the tree must either be less than the parent node, or not exist, and the right node of every node in the tree must either be greater than the parent node, or not exist. A tree structure is hierarchical, unlike many other structures that are linear such as linked lists, queues, and stacks. Tree structures are often used due to many operations requiring less time than linear structures. An AVL Tree is a Binary Search Tree that self-balances, which means that no subtree of the overall tree will be unbalanced (the difference of heights of subtrees can be at most 1).

Application Problem: With repair_tree function, I took in a tree where two values may have been swapped, violating the BST property of nodes on the left being less than the parent node, and nodes on the right being larger than the parent node to repair by finding if two values have actually been swapped, and swapping them back if necessary.